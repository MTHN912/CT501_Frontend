{"ast":null,"code":"import axios from \"axios\"; // Import axios\n\nexport default {\n  name: \"DishList\",\n  data() {\n    return {\n      selectedCategory: \"Tất cả\",\n      showCategories: true,\n      categories: [],\n      // Danh mục lấy từ API\n      dishes: [] // Danh sách món ăn lấy từ API\n    };\n  },\n  computed: {\n    // Lọc món ăn dựa trên danh mục được chọn\n    filteredDishes() {\n      if (this.selectedCategory === \"Tất cả\") {\n        return this.dishes;\n      }\n      return this.dishes.filter(dish => dish.category === this.selectedCategory);\n    },\n    // Tổng số lượng món trong giỏ hàng\n    cartTotalQuantity() {\n      return this.$store.state.cart.items.reduce((total, item) => total + item.quantity, 0);\n    },\n    // Truy cập giỏ hàng từ store\n    cart() {\n      return this.$store.state.cart;\n    }\n  },\n  methods: {\n    // Lọc món ăn theo danh mục\n    filterByCategory(category) {\n      this.selectedCategory = category;\n\n      // Cuộn danh sách món ăn về đầu trang khi chọn danh mục mới\n      const dishList = this.$el.querySelector(\".dish-list\");\n      if (dishList) {\n        window.scrollTo({\n          top: 0,\n          behavior: \"smooth\"\n        });\n      }\n    },\n    // Điều hướng đến trang chi tiết món ăn\n    goToDetail(id) {\n      this.$router.push({\n        name: \"DishDetail\",\n        params: {\n          id: id\n        }\n      });\n    },\n    // Hiện/Ẩn danh sách danh mục\n    toggleCategory() {\n      this.showCategories = !this.showCategories;\n    },\n    // Thêm món vào giỏ hàng thông qua store\n    selectDish(dish) {\n      this.$store.dispatch(\"addToCart\", {\n        dishId: dish._id,\n        quantity: dish.quantity || 1 // Số lượng mặc định là 1 nếu không có\n      }).then(() => {\n        alert(`Bạn muốn thêm ${dish.quantity || 1} món ${dish.name} vào giỏ hàng`);\n      }).catch(error => {\n        console.error(\"Lỗi khi thêm món vào giỏ hàng:\", error);\n      });\n    },\n    // Lấy giỏ hàng từ store\n    fetchCart() {\n      this.$store.dispatch(\"fetchCart\").then(() => {\n        console.log(\"Giỏ hàng đã được tải thành công\");\n      }).catch(error => {\n        console.error(\"Lỗi khi tải giỏ hàng:\", error);\n      });\n    },\n    // Điều hướng đến trang giỏ hàng\n    goToCart() {\n      this.$router.push({\n        name: \"Cart\"\n      });\n    },\n    // Yêu thích món ăn\n    toggleFavorite(dish) {\n      dish.favorite = !dish.favorite;\n    },\n    // Gọi API để lấy danh mục món ăn\n    async fetchCategories() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/category/getCategory\");\n        this.categories = response.data.map(category => category.name);\n      } catch (error) {\n        console.error(\"Lỗi khi tải danh mục:\", error);\n      }\n    },\n    // Gọi API để lấy danh sách món ăn\n    async fetchDishes() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/dish/getDish\");\n        this.dishes = response.data;\n      } catch (error) {\n        console.error(\"Lỗi khi tải danh sách món ăn:\", error);\n      }\n    }\n  },\n  mounted() {\n    // Gọi API khi component được mount\n    this.fetchCategories();\n    this.fetchDishes();\n    this.fetchCart(); // Lấy giỏ hàng từ store khi component mount\n  }\n};","map":{"version":3,"names":["axios","name","data","selectedCategory","showCategories","categories","dishes","computed","filteredDishes","filter","dish","category","cartTotalQuantity","$store","state","cart","items","reduce","total","item","quantity","methods","filterByCategory","dishList","$el","querySelector","window","scrollTo","top","behavior","goToDetail","id","$router","push","params","toggleCategory","selectDish","dispatch","dishId","_id","then","alert","catch","error","console","fetchCart","log","goToCart","toggleFavorite","favorite","fetchCategories","response","get","map","fetchDishes","mounted"],"sources":["D:\\Tiểu Luận Tốt Nghiệp\\Frontend\\src\\components\\Menu\\DishList.vue"],"sourcesContent":["<template>\n  <div class=\"menu-container\">\n    <!-- Danh mục món ăn -->\n    <aside class=\"category-list\">\n      <h3 @click=\"toggleCategory\">\n        Danh mục<span v-if=\"!showCategories\">▼</span><span v-else>▲</span>\n      </h3>\n      <ul v-show=\"showCategories\">\n        <li\n          @click=\"filterByCategory('Tất cả')\"\n          :class=\"{ active: selectedCategory === 'Tất cả' }\"\n        >\n          Tất cả\n        </li>\n        <li\n          v-for=\"category in categories\"\n          :key=\"category\"\n          @click=\"filterByCategory(category)\"\n          :class=\"{ active: selectedCategory === category }\"\n        >\n          {{ category }}\n        </li>\n      </ul>\n    </aside>\n\n    <!-- Danh sách món ăn -->\n    <div class=\"dish-list\">\n      <h2 class=\"title\">Danh sách món ăn</h2>\n      <ul class=\"dish-grid\">\n        <li v-for=\"dish in filteredDishes\" :key=\"dish.id\" class=\"dish-item\">\n          <div class=\"dish-info\">\n            <img\n              :src=\"dish.image\"\n              alt=\"dish image\"\n              class=\"dish-image\"\n              @click=\"goToDetail(dish.id)\"\n            />\n            <div class=\"dish-details\">\n              <h3 @click=\"goToDetail(dish.id)\">{{ dish.name }}</h3>\n              <p>{{ dish.description }}</p>\n              <p>{{ dish.detailedDescription }}</p>\n              <span>Giá: {{ dish.price }} đ</span>\n\n              <!-- Nút yêu thích và đánh giá -->\n              <div class=\"dish-controls\">\n                <div class=\"dish-rating\">\n                  <span\n                    v-for=\"n in 5\"\n                    :key=\"n\"\n                    class=\"star\"\n                    :class=\"{ filled: n <= dish.rating }\"\n                    >★</span\n                  >\n                  <span>({{ dish.rating }})</span>\n                </div>\n                <button @click=\"toggleFavorite(dish)\" class=\"favorite-button\">\n                  <i\n                    :class=\"dish.favorite ? 'fas fa-heart' : 'far fa-heart'\"\n                    aria-hidden=\"true\"\n                  ></i>\n                </button>\n              </div>\n\n              <!-- Số lượng và nút chọn món -->\n              <div class=\"quantity-input\">\n                <label for=\"quantity\">Số lượng:</label>\n                <input\n                  type=\"number\"\n                  id=\"quantity\"\n                  v-model=\"dish.quantity\"\n                  min=\"1\"\n                  class=\"quantity-field\"\n                />\n              </div>\n              <button @click=\"selectDish(dish)\" class=\"select-button\">\n                Chọn món\n              </button>\n            </div>\n          </div>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\"; // Import axios\n\nexport default {\n  name: \"DishList\",\n  data() {\n    return {\n      selectedCategory: \"Tất cả\",\n      showCategories: true,\n      categories: [], // Danh mục lấy từ API\n      dishes: [], // Danh sách món ăn lấy từ API\n    };\n  },\n  computed: {\n    // Lọc món ăn dựa trên danh mục được chọn\n    filteredDishes() {\n      if (this.selectedCategory === \"Tất cả\") {\n        return this.dishes;\n      }\n      return this.dishes.filter(\n        (dish) => dish.category === this.selectedCategory\n      );\n    },\n    // Tổng số lượng món trong giỏ hàng\n    cartTotalQuantity() {\n      return this.$store.state.cart.items.reduce(\n        (total, item) => total + item.quantity,\n        0\n      );\n    },\n    // Truy cập giỏ hàng từ store\n    cart() {\n      return this.$store.state.cart;\n    },\n  },\n  methods: {\n    // Lọc món ăn theo danh mục\n    filterByCategory(category) {\n      this.selectedCategory = category;\n\n      // Cuộn danh sách món ăn về đầu trang khi chọn danh mục mới\n      const dishList = this.$el.querySelector(\".dish-list\");\n      if (dishList) {\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      }\n    },\n    // Điều hướng đến trang chi tiết món ăn\n    goToDetail(id) {\n      this.$router.push({ name: \"DishDetail\", params: { id: id } });\n    },\n    // Hiện/Ẩn danh sách danh mục\n    toggleCategory() {\n      this.showCategories = !this.showCategories;\n    },\n    // Thêm món vào giỏ hàng thông qua store\n    selectDish(dish) {\n      this.$store\n        .dispatch(\"addToCart\", {\n          dishId: dish._id,\n          quantity: dish.quantity || 1, // Số lượng mặc định là 1 nếu không có\n        })\n        .then(() => {\n          alert(\n            `Bạn muốn thêm ${dish.quantity || 1} món ${dish.name} vào giỏ hàng`\n          );\n        })\n        .catch((error) => {\n          console.error(\"Lỗi khi thêm món vào giỏ hàng:\", error);\n        });\n    },\n    // Lấy giỏ hàng từ store\n    fetchCart() {\n      this.$store\n        .dispatch(\"fetchCart\")\n        .then(() => {\n          console.log(\"Giỏ hàng đã được tải thành công\");\n        })\n        .catch((error) => {\n          console.error(\"Lỗi khi tải giỏ hàng:\", error);\n        });\n    },\n    // Điều hướng đến trang giỏ hàng\n    goToCart() {\n      this.$router.push({ name: \"Cart\" });\n    },\n    // Yêu thích món ăn\n    toggleFavorite(dish) {\n      dish.favorite = !dish.favorite;\n    },\n    // Gọi API để lấy danh mục món ăn\n    async fetchCategories() {\n      try {\n        const response = await axios.get(\n          \"http://localhost:3000/category/getCategory\"\n        );\n        this.categories = response.data.map((category) => category.name);\n      } catch (error) {\n        console.error(\"Lỗi khi tải danh mục:\", error);\n      }\n    },\n    // Gọi API để lấy danh sách món ăn\n    async fetchDishes() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/dish/getDish\");\n        this.dishes = response.data;\n      } catch (error) {\n        console.error(\"Lỗi khi tải danh sách món ăn:\", error);\n      }\n    },\n  },\n  mounted() {\n    // Gọi API khi component được mount\n    this.fetchCategories();\n    this.fetchDishes();\n    this.fetchCart(); // Lấy giỏ hàng từ store khi component mount\n  },\n};\n</script>\n\n<style scoped>\n.menu-container {\n  display: flex;\n  padding: 20px;\n  background-color: #f5f5f5;\n}\n\n.category-list {\n  width: 220px;\n  margin-right: 25px;\n  position: sticky;\n  top: 20px; /* Khoảng cách từ đỉnh màn hình khi bắt đầu cố định */\n  max-height: 100vh; /* Giới hạn chiều cao tối đa bằng chiều cao màn hình */\n  overflow-y: auto; /* Cho phép cuộn nếu danh mục dài quá */\n}\n\n.category-list h3 {\n  cursor: pointer;\n  background-color: #f8f8f8;\n  padding: 10px;\n  text-align: center;\n  border-radius: 5px;\n  transition: background-color 0.3s;\n}\n\n.category-list h3:hover {\n  background-color: #e0e0e0;\n}\n\n.category-list ul {\n  list-style: none;\n  padding: 0;\n  margin-top: 10px;\n}\n\n.category-list li {\n  cursor: pointer;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  text-align: center;\n  transition: background-color 0.3s;\n}\n\n.category-list li.active {\n  background-color: #f5f5f5;\n  font-weight: bold;\n}\n\n.category-list li:hover {\n  background-color: #e0e0e0;\n}\n\n.dish-list {\n  flex: 1;\n}\n\n.title {\n  font-size: 2rem;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.dish-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 35px;\n}\n\n.dish-item {\n  border: 1px solid #ddd;\n  border-radius: 15px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s, box-shadow 0.3s;\n  background-color: #fff; /* Nền màu trắng cho từng món */\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%; /* Đảm bảo các phần tử bên trong luôn giãn đều chiều cao */\n}\n\n.dish-item:hover {\n  transform: scale(1.05); /* Hiệu ứng phóng to khi hover */\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Thêm hiệu ứng bóng đổ khi hover */\n}\n\n.dish-info {\n  text-align: center;\n}\n\n.dish-image {\n  width: 300px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 10px;\n}\n\n.dish-details p {\n  margin: 5px 0;\n  color: #666;\n  max-height: 60px; /* Giới hạn chiều cao cho mô tả */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2; /* Giới hạn số dòng */\n  -webkit-box-orient: vertical;\n}\n\n.dish-details h3 {\n  font-size: 1.6rem;\n  color: #333;\n  font-weight: bold; /* Đậm hơn */\n  max-height: 40px; /* Giới hạn chiều cao cho tên món */\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.dish-details span {\n  font-weight: bold;\n  color: #000;\n  margin-top: 10px;\n  display: block;\n}\n\n.dish-controls {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n}\n\n.dish-rating {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 10px;\n}\n\n.star {\n  color: #ddd;\n  font-size: 1.2rem;\n  margin-right: 5px;\n}\n\n.star.filled {\n  color: gold;\n}\n\n.favorite-button {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  font-size: 1.5rem;\n  color: red;\n  margin-left: 5px;\n  transition: color 0.3s, transform 0.3s;\n}\n\n.favorite-button.active i {\n  color: red; /* Màu khi đã được yêu thích */\n}\n\n.favorite-button:hover i {\n  color: #ff6666; /* Màu khi hover */\n  transform: scale(1.1); /* Hiệu ứng phóng to vừa phải khi hover */\n}\n\n.quantity-input {\n  margin-top: 15px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.quantity-field {\n  width: 60px;\n  padding: 5px;\n  margin-left: 10px;\n  font-size: 1rem;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.select-button {\n  background-color: #ff6600;\n  color: white;\n  padding: 10px 25px;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 15px;\n  transition: background-color 0.3s, transform 0.2s;\n  font-size: 1rem;\n}\n\n.select-button:hover {\n  background-color: #ff4500;\n  transform: scale(1.1); /* Phóng to hơn khi hover */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}